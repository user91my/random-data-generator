import fs from "fs";
import path from "path";
import process from "process";

const createUpdateJsonData = (
  fileDirectory, // Target directory to store JSON file (e.g. "./targetFolder").
  fileName, // Name of JSON file (e.g. "dataUser.json").
  keyName, // Key to be inserted into JSON (e.g. "dataUser").
  callbackDataGenerator, // Callback that generates the data (e.g. "createDataUserArr").
  numberOfData // Number of data to be generated by the callback (e.g. 100).
) => {
  const currentWorkingDirectory = process.cwd();
  console.log("Current Working Directory:", currentWorkingDirectory);

  try {
    // Full path for JSON file.
    // e.g. "./targetFolder/fileName.ext"
    const jsonFullFilePath = path.join(
      fileDirectory, // e.g. "./targetFolder"
      fileName // e.g. "dataUser.json"
    );

    // Ensures the file directory exists.
    if (!fs.existsSync(fileDirectory)) {
      fs.mkdirSync(fileDirectory);
      console.log(`Created file directory: ${fileDirectory}`);
    }

    // Read/Parses the existing JSON data or create an empty object
    // if the file doesn't exist.
    const existingData = fs.existsSync(jsonFullFilePath)
      ? JSON.parse(fs.readFileSync(jsonFullFilePath, "utf-8"))
      : {};

    // Update or add properties as needed.
    existingData[keyName] = callbackDataGenerator(numberOfData);

    // Write the updated data back to the file.
    // "JSON.stringify( object, replacerFunction, spaces )" :-
    // replacerFunction -- manipulate the way objects are stringified.
    // spaces -- number of spaces to use for indentation in formatted JSON string.
    const updatedData = JSON.stringify(existingData, null, 2);
    fs.writeFileSync(jsonFullFilePath, updatedData);
    console.log(`Updated or created file: ${path.resolve(jsonFullFilePath)}`);
  } catch (error) {
    console.log(error);
  }
};

export default createUpdateJsonData;
